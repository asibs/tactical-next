name: Update GoogleSheet Data
on:
  # Allows workflow to be manually run in Github UI
  workflow_dispatch:
  # Allows workflow to be called via HTTP calls to GitHub (with correct auth, etc)
  repository_dispatch:
    types: [update-googlesheet-data]

permissions:
  contents: write
  pull-requests: write

jobs:
  create-or-update-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code from main branch
        uses: actions/checkout@v4
      # Currently using a fork of https://github.com/jroehl/gsheet.action/ which adds
      # the ability to output to file rather than using the standard GitHub Action
      # output to an ENV. Outputting to ENV doesn't work when downloading large volumes
      # of data. If/when this PR is merged we can go back to using the original repo:
      # https://github.com/jroehl/gsheet.action/pull/615
      - uses: asibs/gsheet.action.asibs@release
        name: Download latest data from Google Sheets
        id: download_gsheets_data
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GSHEET_PRIVATE_KEY }}
        with:
          spreadsheetId: ${{ vars.GSHEET_SPREADSHEET_ID }}
          commands: |
            [
              {
                "command": "getData",
                "args": {
                  "range": "'TV Advice - EXPORT'!A:AR",
                  "hasHeaderRow": true
                }
              }
            ]
          outputFile: /tmp/gsheet_action_results.json
      - name: Output full results
        run: |
          cat /tmp/gsheet_action_results.json
      - name: Write internal json datafile
        run: |
          jq '.results[0].result.formatted | map({
            constituencyIdentifiers: {
              slug: ."STT Slug",
              name: ."Name",
              mySocietyCode: ."Short Code"
            },
            recommendation: {
              partySlug: ."TV Advice",
              reason: ."Manual TV Explanation",
              reasonUrl: ."Manual TV Explanation Source"
            },
            impliedPreviousResult: {
              winningParty: ."Implied Vote Share: Winner",
              biggestProgressiveParty: ."Implied Vote Share: Biggest Progressive Party",
              partyVoteResults: [
                {
                  partySlug: "Con",
                  votePercent: (."Implied Vote Share: Con" | gsub("%"; "") | tonumber),
                  rawVote: (."Implied Raw: Conv" // 0 | tonumber)
                },
                {
                  partySlug: "Lab",
                  votePercent: (."Implied Vote Share: Lab" | gsub("%"; "") | tonumber),
                  rawVote: (."Implied Raw: Labv" // 0 | tonumber)
                },
                {
                  partySlug: "LD",
                  votePercent: (."Implied Vote Share: LD" | gsub("%"; "") | tonumber),
                  rawVote: (."Implied Raw: LDv" // 0 | tonumber)
                },
                {
                  partySlug: "Green",
                  votePercent: (."Implied Vote Share: Green" | gsub("%"; "") | tonumber),
                  rawVote: (."Implied Raw: Grnv" // 0 | tonumber)
                },
                {
                  partySlug: "Reform",
                  votePercent: (."Implied Vote Share: Reform" | gsub("%"; "") | tonumber),
                  rawVote: (."Implied Raw: Brxv" // 0 | tonumber)
                },
                {
                  partySlug: "SNP",
                  votePercent: (."Implied Vote Share: SNP" | gsub("%"; "") | tonumber),
                  rawVote: (."Implied Raw: SNPv" // 0 | tonumber)
                },
                {
                  partySlug: "PC",
                  votePercent: (."Implied Vote Share: PC" | gsub("%"; "") | tonumber),
                  rawVote: (."Implied Raw: PCv" // 0 | tonumber)
                },
                {
                  partySlug: "Other",
                  votePercent: (."Implied Vote Share: Tot oths" | gsub("%"; "") | tonumber),
                  rawVote: (."Implied Raw: TotOthv" // 0 | tonumber)
                },
                {
                  partySlug: "NonVoter",
                  votePercent: 0,
                  rawVote: (."Implied Raw: non-voter" // 0 | tonumber)
                }
              ]
            },
            pollingResults: {
              winningParty: ."MRP Vote Share Winner",
              biggestProgressiveParty: ."MRP Vote Share Biggest Progressive Party",
              partyVoteResults: [
                {
                  partySlug: "Con",
                  votePercent: (."MRP Vote Share Con" | gsub("%"; "") | tonumber)
                },
                {
                  partySlug: "Lab",
                  votePercent: (."MRP Vote Share Lab" | gsub("%"; "") | tonumber)
                },
                {
                  partySlug: "LD",
                  votePercent: (."MRP Vote Share LD" | gsub("%"; "") | tonumber)
                },
                {
                  partySlug: "Green",
                  votePercent: (."MRP Vote Share Green" | gsub("%"; "") | tonumber)
                },
                {
                  partySlug: "Reform",
                  votePercent: (."MRP Vote Share Reform" | gsub("%"; "") | tonumber)
                },
                {
                  partySlug: "SNP",
                  votePercent: (."MRP Vote Share SNP" | gsub("%"; "") | tonumber)
                },
                {
                  partySlug: "PC",
                  votePercent: (."MRP Vote Share PC" | gsub("%"; "") | tonumber)
                },
                {
                  partySlug: "Other",
                  votePercent: (."MRP Vote Share Other" | gsub("%"; "") | tonumber)
                }

              ]
            },
            otherVoteData: {
              targetSeatData: [
                {
                  partySlug: "Lab",
                  likelyTarget: (."Labour Non-Target" | (if . == "non-target" then "NO" else "UNKNOWN" end))
                },
                {
                  partySlug: "LD",
                  likelyTarget: (."Lib Dem Top 50 MRP" | (if . == "" then "NO" else "YES" end))
                },
                {
                  partySlug: "Green",
                  likelyTarget: (."Green Target" | (if . == "TRUE" then "YES" else "NO" end))
                }
              ],
              conservativeWinUnlikely: (."Con Can'\''t Win" | (if . == "TRUE" then true else false end))
            }
          })' /tmp/gsheet_action_results.json > data/constituency.json

          # Add the updates to git
          git add data/constituency.json
      - name: Write public-facing CSV
        run: |
          new_csv_name=$(date +%Y%m%d_%H%M).csv
          # 1 - Build a list of regular expressions which match the allowed columns
          # 2 - Build the list of column names by adding all keys from the formatted
          #     results, and only selecting those matching one of the allowed regex
          # 3 - Map each record (row) to an array of the values of the allowed columns
          # 4 - Output the allowed column headers and each row to CSV format
          jq -r '(
              [
                "^Short Code$", "^Name$", "^Country$",
                "^Implied Vote Share", "^Implied Raw", "^MRP Vote Share",
                "^Green Target$", "^Labour Non-Target$", "^Lib Dem Top 50 MRP$",
                "^TV Advice$"
              ]
            ) as $allowColRegexes |
            (
              [
                .results[0].result.formatted[0] | keys_unsorted | .[] |
                select(
                  . as $colname | any(
                    $allowColRegexes[]; . as $allowColRegex | $colname | test($allowColRegex)
                  )
                )
              ]
            ) as $colnames |
            .results[0].result.formatted | map(. as $row | $colnames | map($row[.])) as $rows |
            $colnames, $rows[] | @csv
          ' /tmp/gsheet_action_results.json > public/data/$new_csv_name

          # Check if the new file is any different from the most recent one
          if cmp -s "public/data/$new_csv_name" "public/data/latest.csv"; then
              # Files the same - delete 'new' file
              rm public/data/$new_csv_name
          else
              # Files different - copy new data to latest.csv & add both to Git
              rm public/data/latest.csv
              cp public/data/$new_csv_name public/data/latest.csv
              git add public/data/$new_csv_name public/data/latest.csv
          fi
      - name: Commit Changes and Create Pull Request
        uses: peter-evans/create-pull-request@v6.0.1
        with:
          # Note: Need to use a Personal Access Token here, NOT the standard
          # secrets.GITHUB_TOKEN - if we use the standard Github Actions GITHUB_TOKEN
          # then the commit/push/etc won't trigger subsequent Github Actions (such as
          # the lint-pr action, which is required to merge PRs). The Personal Access
          # Token must be setup as an Action Secret on the GitHub repo. Use the same
          # Personal Access Token as the GHA_TOKEN env variable in your deployed app.
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          base: main
          branch: auto/constituency-data-changes
          commit-message: Latest constituency data from Google Sheets
          committer: GitHub Action Bot - Constituency Data <noreply@github.com>
          author: GitHub Action Bot - Constituency Data <noreply@github.com>
          title: "[Constituency Data] Latest Google Sheets Data"
          body: |
            Automatically created by Update-Googlesheet-Data Github action
          labels: |
            automated-pr
            constituency-data-pr
