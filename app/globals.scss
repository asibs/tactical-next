/* @tailwind base;
@tailwind components;
@tailwind utilities; */

/* Create color utilities for all colors/shades. See:
   https://getbootstrap.com/docs/5.3/customize/color/#generating-utilities
 */
@import "bootstrap/scss/functions";
@import "bootstrap/scss/variables";
@import "bootstrap/scss/variables-dark";
@import "bootstrap/scss/maps";
@import "bootstrap/scss/mixins";
@import "bootstrap/scss/utilities";

$custom-colors: (
  "pink": #ff99ff,
  "pink-light": #ffccff,
  "pink-strong": #ff66ff,
  "pink-dark": #ee66ee,
);

$all-colors: map-merge-multiple($custom-colors, $grays);

$theme-colors: map-merge-multiple($theme-colors, $custom-colors);
$theme-colors-rgb: map-loop($theme-colors, to-rgb, "$value");
$utilities-colors: map-merge($utilities-colors, $theme-colors-rgb);

$utilities: map-merge(
  $utilities,
  (
    "color":
      map-merge(
        map-get($utilities, "color"),
        (
          values:
            map-merge(
              map-get(map-get($utilities, "color"), "values"),
              $all-colors
            ),
        )
      ),
  )
);

// $utilities: map-merge(
//   $utilities,
//   (
//     "background-color": (
//       property: background-color,
//       class: bg,
//       values: $custom-colors,
//     ),
//   )
// );

$utilities: map-merge(
  $utilities,
  (
    "background-color":
      map-merge(
        map-get($utilities, "background-color"),
        (
          values:
            map-merge(
              map-get(map-get($utilities, "background-color"), "values"),
              $all-colors
            ),
        )
      ),
  )
);

// $utilities-text-colors: map-loop($utilities-colors, rgba-css-var, "$key", "text");
// $utilities-bg-colors: map-loop($utilities-colors, rgba-css-var, "$key", "bg");

// @import "bootstrap/scss/utilities/api";

/* Allow rows to have up to 12 columns via rol-cols-x */
$grid-row-columns: 12;

/* Override some of the default Bootstrap link styles */
$link-color: #000000;
$link-color-rgb: 0, 0, 0;
$link-decoration: underline;
$link-hover-color: #ee66ee;
$bs-link-hover-color-rgb: 238, 102, 238;

@import "bootstrap/scss/bootstrap";
// @import "../node_modules/bootstrap/scss/bootstrap";

/***** GLOBAL DEFAULT STYLES *****/

/* TYPOGRAPHY */
body {
  font-size: 18px;
}

html, body {
  background-color: var(--bs-gray-300);
}

/* HEADER */
header {
  background-color: var(--bs-black);
  color: var(--bs-white);
}

header h1 {
  font-size: 2.4rem;
}

@include media-breakpoint-up(lg) {
  header h1 {
    font-size: 5rem;
  }
}

/* TEXT HEADINGS */
h1,
h2,
h3,
h4,
h5,
h6 {
  line-height: 1;
  font-weight: bold;
  text-transform: uppercase;
}

/* FORM INPUTS */
// Set checkbox size & style
input[type="checkbox"] {
  width: 22px;
  height: 22px;
}
input[type="checkbox"]:checked {
  background-color: var(--bs-gray-900);
  border-color: var(--bs-gray-900);
}

// Set validation error style on all inputs
input[type="text"]:invalid,
input[type="email"]:invalid,
select:invalid,
select option:invalid {
  box-shadow: 0 0 0px 4px rgba(196, 0, 0, 0.5) !important;
}

// Set focus style on all inputs
input[type="text"]:focus,
input[type="email"]:focus,
input[type="checkbox"]:focus,
select:focus,
select option:focus,
button:focus {
  box-shadow: 0 0 0px 4px rgba(255, 255, 255, 0.5) !important;
  border-color: var(--bs-gray-600) !important;
}

// Custom validation for postcode & email text inputs
.invalid-text-greyed:invalid {
  color: var(--bs-gray-600);
}

/* PARTY STYLES */
h3.party {
  font-size: 8vmax;
  font-weight: 800;
  text-transform: uppercase;
}

h3.party-labour,
svg.party-labour,
i.party-labour {
  color: var(--bs-red);
}

div.party-labour {
  background-color: rgba(var(--bs-red-rgb), 1);
  background: linear-gradient(
    rgba(var(--bs-red-rgb), 1),
    rgba(var(--bs-red-rgb), 0.85)
  );
  box-shadow: 0px 5px 10px 0px rgba(var(--bs-black-rgb), 0.075);
  /*border: solid 1px var(--bs-gray-300);*/
}

h3.party-libdem,
svg.party-libdem,
i.party-libdem {
  color: var(--bs-orange);
}

div.party-libdem {
  background-color: rgba(var(--bs-orange-rgb), 1);
  background: linear-gradient(
    rgba(var(--bs-orange-rgb), 1),
    rgba(var(--bs-orange-rgb), 0.85)
  );
  box-shadow: 0px 5px 10px 0px rgba(var(--bs-black-rgb), 0.075);
  /*border: solid 1px var(--bs-gray-300);*/
}

h3.party-green,
svg.party-green,
i.party-green {
  color: var(--bs-green);
}

div.party-green {
  background-color: rgba(var(--bs-green-rgb), 1);
  background: linear-gradient(
    rgba(var(--bs-green-rgb), 1),
    rgba(var(--bs-green-rgb), 0.85)
  );
  box-shadow: 0px 5px 10px 0px rgba(var(--bs-black-rgb), 0.075);
  /*border: solid 1px var(--bs-gray-300);*/
}

h3.party-conservative,
svg.party-conservative,
i.party-conservative {
  color: var(--bs-blue);
}

div.party-conservative {
  background-color: rgba(var(--bs-blue-rgb), 1);
}

/* EXTRA PADDING CLASSES (py-6 / py-sm-6 / etc) */
.py-6 {
  padding-top: 6rem !important;
  padding-bottom: 6rem !important;
}

@include media-breakpoint-up(sm) {
  .py-sm-6 {
    padding-top: 6rem !important;
    padding-bottom: 6rem !important;
  }
}

@include media-breakpoint-up(md) {
  .py-md-6 {
    padding-top: 6rem !important;
    padding-bottom: 6rem !important;
  }
}

@include media-breakpoint-up(lg) {
  .py-lg-6 {
    padding-top: 6rem !important;
    padding-bottom: 6rem !important;
  }
}

@include media-breakpoint-up(xl) {
  .py-xl-6 {
    padding-top: 6rem !important;
    padding-bottom: 6rem !important;
  }
}

@include media-breakpoint-up(xxl) {
  .py-xxl-6 {
    padding-top: 6rem !important;
    padding-bottom: 6rem !important;
  }
}

/* SECTIONS */
section {
  padding-top: 3rem;
  padding-bottom: 2rem;
}

.section-light {
  background-color: var(--bs-gray-200);
  /*box-shadow: inset 0px -1px 0px 0px var(--bs-gray-300);*/
  border-top: 2px solid var(--bs-gray-100);
  border-bottom: 2px solid var(--bs-gray-400);
}

.section-dark {
  background-color: var(--bs-gray-800);
  /*box-shadow: inset 0px -2px 0px 0px var(--bs-gray-900);*/
  border-top: 2px solid var(--bs-gray-700);
  border-bottom: 2px solid var(--bs-gray-900);
}
